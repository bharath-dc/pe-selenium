# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import NoSuchElementException, TimeoutException



class TestLogggg():
  # def fill_form(self):
    # Assuming you've navigated to the form and it's now open
    # Replace 'input_name' with the actual name or id of the form field
    
    # self.driver.find_element(By.CSS_SELECTOR, ".col-12").click()
    # self.driver.find_element(By.XPATH, '/html/body/div/div/div/div/div[2]/div/div/div/div[1]/div/div[2]/div/button').click()
    # self.driver.find_element(By.NAME, "shipment_id").send_keys("123456")
    # # self.driver.find_element(By.NAME, "extraData").send_keys("Extra data here")
    # # For dropdowns, replace 'dropdown_name' with the actual name or id
    # Select(self.driver.find_element(By.NAME, "documentType")
    #         ).select_by_visible_text("Commercial Invoice")

    # # For file upload, replace 'file_input_name' with the actual name or id
    # self.driver.find_element(By.NAME, "fileInput").send_keys(
    #     "docs/invoice_radar_jcb.pdf")
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()


  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_logggg(self):
    self.driver.get("http://deepcognition4.ydns.eu:15002/accounts/login/?next=/")
    self.driver.set_window_size(1936, 1048)
    self.driver.find_element(By.ID, "id_username").click()
    self.driver.find_element(By.ID, "id_username").send_keys("admin@deepcognition.ai")
    self.driver.find_element(By.ID, "id_password").send_keys("Admin@1234")
    self.driver.find_element(By.ID, "id_password").send_keys(Keys.ENTER)
    WebDriverWait(self.driver, 20).until(
            EC.presence_of_element_located(
                (By.CSS_SELECTOR, "li:nth-child(3) span"))
        ) 
    self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(3) span").click()
    self.driver.get("http://deepcognition4.ydns.eu:15002/#/documents")
    time.sleep(30)
    self.driver.switch_to.frame(0)
    self.driver.find_element(By.ID, "input-120").click()
    self.driver.find_element(By.ID, "input-120").send_keys("admin@deepcognition.ai")
    self.driver.find_element(By.ID, "input-123").send_keys("Admin@1234")
    self.driver.find_element(By.ID, "input-123").send_keys(Keys.ENTER)
    try:
      WebDriverWait(self.driver, 60).until(
          EC.presence_of_element_located(
              (By.XPATH, '/html/body/div[1]/div/div/div[1]/main/div/div/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div/div[1]/div/table/thead/tr/th[8]/div[1]/span[1]'))
      )
    except Exception as e:
        print("Page did not load after login.")
    self.driver.switch_to.default_content()   
    # self.driver.find_element(By.XPATH, '/html/body/div/div/div/div/div[2]/div/div/div/div[1]/div/div[2]/div/button').click()
    # self.driver.find_element(By.CSS_SELECTOR, ".form-select").click()
    # dropdown = self.driver.find_element(By.CSS_SELECTOR, ".form-select")
    # dropdown.find_element(By.XPATH, "//option[. = 'Commercial Invoice']").click()
    # self.driver.find_element(By.CSS_SELECTOR, "option:nth-child(3)").click()
    # # self.driver.find_element(By.CSS_SELECTOR, ".text-white").click()

    # self.driver.find_element(By.XPATH, '/html/body/div/div/div/div/div[2]/div/div/div/div[4]/div/div/div[2]/div[1]').click()
    # time.sleep(10)
    # self.driver.find_element(By.CSS_SELECTOR, '.input-file').send_keys(r'C:\Users\Himanshu\Documents\pe-selenium\docs\invoice_radar_jcb.pdf')
    # self.driver.find_element(By.CSS_SELECTOR, ".w-md").click()
    # # self.fill_form()
    # time.sleep(10)
    # self.driver.switch_to.frame(0)
    # while True:
    #     try:
    #         # Find the element and click it
    #         status_element = self.driver.find_element(By.XPATH, '/html/body/div[1]/div/div/div[1]/main/div/div/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div/div[1]/div/table/tbody/tr[1]/td[10]/div/div/span')
    #         if status_element.text == "Processed":
    #             # Click on the link if the status is 'Processed'
    #             link_element = self.driver.find_element(By.XPATH, '/html/body/div[1]/div/div/div[1]/main/div/div/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div/div[1]/div/table/tbody/tr[1]/td[11]/a')
    #             link_element.click()
    #             break
    #         else:
    #             self.driver.find_element(By.CSS_SELECTOR, ".mdi-reload").click()

    #             print("Status is not 'Processed'.")
    #         # Wait for 30 seconds before the next click
    #         time.sleep(30)

    #     except Exception as e:
    #         print(f"An error occurred: {e}") 
    self.driver.switch_to.frame(0)
    while True:
        try:
            # Find the status element
            status_element = self.driver.find_element(By.XPATH, '/html/body/div[1]/div/div/div[1]/main/div/div/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div/div[1]/div/table/tbody/tr[1]/td[10]/div/div/span')
            if status_element.text == "Processed":
                # Click on the link if the status is 'Processed'
                link_element = self.driver.find_element(By.XPATH, '/html/body/div[1]/div/div/div[1]/main/div/div/div[2]/div/div[3]/div/div[1]/div[2]/div/div/div/div/div/div[2]/div/div/div/div[1]/div/div[1]/div/table/tbody/tr[1]/td[11]/a')

                # Click the link (which should open a new window)
                link_element.click()
                

                        


                # Perform your actions in the new window
                # ...

                # Close the new window and switch back to the original window, if necessary
                # self.driver.close()
                # self.driver.switch_to.window(original_window)

            else:
                print("Status is not 'Processed'. Reloading...")
                self.driver.find_element(By.CSS_SELECTOR, ".mdi-reload").click()

            # Wait for 30 seconds before the next check
            time.sleep(30)

        except Exception as e:
            print(f"An error occurred: {e}")    
    
           

  
    # self.driver.switch_to.frame(0)
    # self.vars["window_handles"] = self.driver.window_handles
    # self.driver.get(link_element)
    # self.vars["win4226"] = self.wait_for_window(2000)
    # self.vars["root"] = self.driver.current_window_handle
    # self.driver.switch_to.window(self.vars["win4226"])
    # # self.driver.switch_to.window(self.vars["root"])


    # self.driver.find_element(By.CSS_SELECTOR, ".dropdown-toggle:nth-child(2)").click()
    # WebDriverWait(self.driver, 30).until(
    #     EC.presence_of_element_located((By.CSS_SELECTOR, '.sliderWrapper:nth-child(1) .slider'))
    # )
    # self.driver.find_element(By.CSS_SELECTOR, ".sliderWrapper:nth-child(1) .slider").click()
    # self.driver.find_element(By.ID, "runcheck-btn1").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".dropdown-toggle:nth-child(2)").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".sliderWrapper:nth-child(2) .slider").click()
    # WebDriverWait(self.driver, 30).until(
    #     EC.presence_of_element_located((By.CSS_SELECTOR, ".sliderWrapper:nth-child(3) .slider"))
    # )
    # self.driver.find_element(By.CSS_SELECTOR, ".sliderWrapper:nth-child(3) .slider").click()
    # self.driver.find_element(By.ID, "runcheck-btn1").click()
    # self.driver.find_element(By.CSS_SELECTOR, "#check_status_text > .badge").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".jsPanel-btn-close > .jsPanel-icon").click()
    # self.driver.find_element(By.CSS_SELECTOR, "#check_status_text > .badge").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".jsPanel-btn-close > .jsPanel-icon").click()
    # self.driver.find_element(By.CSS_SELECTOR, "#publish_status_text > .badge").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".jsPanel-btn-close path").click()
    # self.driver.find_element(By.ID, "line-item-btn").click()
    # self.driver.find_element(By.ID, "line-item-btn").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".nav").click()
    # self.driver.find_element(By.ID, "btnGroupDrop1").click()
    # self.driver.find_element(By.ID, "btnGroupDrop1").click()
    # self.driver.find_element(By.ID, "btnGroupDrop1").click()
    # self.driver.find_element(By.ID, "export-btn").click()
    # self.driver.find_element(By.CSS_SELECTOR, ".svgclass > svg").click()   

